// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errors.proto

package com.vearch.grpc.entity;

/**
 * Protobuf enum {@code ErrorEnum}
 */
public enum ErrorEnum
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SUCCESS = 0;</code>
   */
  SUCCESS(0),
  /**
   * <code>INTERNAL_ERROR = 1;</code>
   */
  INTERNAL_ERROR(1),
  /**
   * <code>NAME_OR_PASSWORD = 2;</code>
   */
  NAME_OR_PASSWORD(2),
  /**
   * <code>SYSBUSY = 3;</code>
   */
  SYSBUSY(3),
  /**
   * <code>PARAM_ERROR = 4;</code>
   */
  PARAM_ERROR(4),
  /**
   * <code>INVALID_CFG = 5;</code>
   */
  INVALID_CFG(5),
  /**
   * <code>TIMEOUT = 6;</code>
   */
  TIMEOUT(6),
  /**
   * <code>SERVICE_UNAVAILABLE = 7;</code>
   */
  SERVICE_UNAVAILABLE(7),
  /**
   * <code>ZONE_NOT_EXISTS = 8;</code>
   */
  ZONE_NOT_EXISTS(8),
  /**
   * <code>LOCAL_ZONE_OPS_FAILED = 9;</code>
   */
  LOCAL_ZONE_OPS_FAILED(9),
  /**
   * <code>DUP_ZONE = 10;</code>
   */
  DUP_ZONE(10),
  /**
   * <code>DUP_DB = 11;</code>
   */
  DUP_DB(11),
  /**
   * <code>INVALID_ENGINE = 12;</code>
   */
  INVALID_ENGINE(12),
  /**
   * <code>DB_NOTEXISTS = 13;</code>
   */
  DB_NOTEXISTS(13),
  /**
   * <code>DB_Not_Empty = 14;</code>
   */
  DB_Not_Empty(14),
  /**
   * <code>DUP_SPACE = 15;</code>
   */
  DUP_SPACE(15),
  /**
   * <code>SPACE_NOTEXISTS = 16;</code>
   */
  SPACE_NOTEXISTS(16),
  /**
   * <code>PARTITION_HAS_TASK_NOW = 17;</code>
   */
  PARTITION_HAS_TASK_NOW(17),
  /**
   * <code>REPLICA_NOT_EXISTS = 18;</code>
   */
  REPLICA_NOT_EXISTS(18),
  /**
   * <code>DUP_REPLICA = 19;</code>
   */
  DUP_REPLICA(19),
  /**
   * <code>PARTITION_REPLICA_LEADER_NOT_DELETE = 20;</code>
   */
  PARTITION_REPLICA_LEADER_NOT_DELETE(20),
  /**
   * <code>PS_NOTEXISTS = 21;</code>
   */
  PS_NOTEXISTS(21),
  /**
   * <code>PS_Already_Exists = 22;</code>
   */
  PS_Already_Exists(22),
  /**
   * <code>LOCAL_SPACE_OPS_FAILED = 23;</code>
   */
  LOCAL_SPACE_OPS_FAILED(23),
  /**
   * <code>Local_PS_Ops_Failed = 24;</code>
   */
  Local_PS_Ops_Failed(24),
  /**
   * <code>GENID_FAILED = 25;</code>
   */
  GENID_FAILED(25),
  /**
   * <code>LOCALDB_OPTFAILED = 26;</code>
   */
  LOCALDB_OPTFAILED(26),
  /**
   * <code>SPACE_SCHEMA_INVALID = 27;</code>
   */
  SPACE_SCHEMA_INVALID(27),
  /**
   * <code>RPC_GET_CLIENT_FAILED = 28;</code>
   */
  RPC_GET_CLIENT_FAILED(28),
  /**
   * <code>RPC_INVALID_RESP = 29;</code>
   */
  RPC_INVALID_RESP(29),
  /**
   * <code>RPC_INVOKE_FAILED = 30;</code>
   */
  RPC_INVOKE_FAILED(30),
  /**
   * <code>RPC_PARAM_ERROR = 31;</code>
   */
  RPC_PARAM_ERROR(31),
  /**
   * <code>METHOD_NOT_IMPLEMENT = 32;</code>
   */
  METHOD_NOT_IMPLEMENT(32),
  /**
   * <code>USER_NOT_EXISTS = 33;</code>
   */
  USER_NOT_EXISTS(33),
  /**
   * <code>DUP_USER = 34;</code>
   */
  DUP_USER(34),
  /**
   * <code>USER_OPS_FAILED = 35;</code>
   */
  USER_OPS_FAILED(35),
  /**
   * <code>AUTHENTICATION_FAILED = 36;</code>
   */
  AUTHENTICATION_FAILED(36),
  /**
   * <code>REGION_NOT_EXISTS = 37;</code>
   */
  REGION_NOT_EXISTS(37),
  /**
   * <code>MASTER_PS_CAN_NOT_SELECT = 38;</code>
   */
  MASTER_PS_CAN_NOT_SELECT(38),
  /**
   * <code>MASTER_PS_NOT_ENOUGH_SELECT = 39;</code>
   */
  MASTER_PS_NOT_ENOUGH_SELECT(39),
  /**
   * <code>PARTITION_DUPLICATE = 40;</code>
   */
  PARTITION_DUPLICATE(40),
  /**
   * <code>PARTITION_NOT_EXIST = 41;</code>
   */
  PARTITION_NOT_EXIST(41),
  /**
   * <code>PARTITION_NOT_LEADER = 42;</code>
   */
  PARTITION_NOT_LEADER(42),
  /**
   * <code>PARTITION_NO_LEADER = 43;</code>
   */
  PARTITION_NO_LEADER(43),
  /**
   * <code>PARTITION_REQ_PARAM = 44;</code>
   */
  PARTITION_REQ_PARAM(44),
  /**
   * <code>PARTITON_ENGINENAME_INVALID = 45;</code>
   */
  PARTITON_ENGINENAME_INVALID(45),
  /**
   * <code>UNKNOWN_PARTITION_RAFT_CMD_TYPE = 46;</code>
   */
  UNKNOWN_PARTITION_RAFT_CMD_TYPE(46),
  /**
   * <code>MASTER_SERVER_IS_NOT_RUNNING = 47;</code>
   */
  MASTER_SERVER_IS_NOT_RUNNING(47),
  /**
   * <code>PARTITION_IS_INVALID = 48;</code>
   */
  PARTITION_IS_INVALID(48),
  /**
   * <code>PARTITION_IS_CLOSED = 49;</code>
   */
  PARTITION_IS_CLOSED(49),
  /**
   * <code>DOCUMENT_NOT_EXIST = 50;</code>
   */
  DOCUMENT_NOT_EXIST(50),
  /**
   * <code>DOCUMENT_EXIST = 51;</code>
   */
  DOCUMENT_EXIST(51),
  /**
   * <code>DOCUMENT_MUST_HAS_SOURCE = 52;</code>
   */
  DOCUMENT_MUST_HAS_SOURCE(52),
  /**
   * <code>PULL_OUT_VERSION_NOT_MATCH = 53;</code>
   */
  PULL_OUT_VERSION_NOT_MATCH(53),
  /**
   * <code>FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE = 54;</code>
   */
  FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE(54),
  /**
   * <code>ROUTER_NO_PS_CLIENT = 55;</code>
   */
  ROUTER_NO_PS_CLIENT(55),
  /**
   * <code>ROUTER_CALL_PS_RPC_ERR = 56;</code>
   */
  ROUTER_CALL_PS_RPC_ERR(56),
  /**
   * <code>GAMMA_SEARCH_QUERY_NUM_LESS_0 = 57;</code>
   */
  GAMMA_SEARCH_QUERY_NUM_LESS_0(57),
  /**
   * <code>GAMMA_SEARCH_NO_CREATE_INDEX = 58;</code>
   */
  GAMMA_SEARCH_NO_CREATE_INDEX(58),
  /**
   * <code>GAMMA_SEARCH_INDEX_QUERY_ERR = 59;</code>
   */
  GAMMA_SEARCH_INDEX_QUERY_ERR(59),
  /**
   * <code>GAMMA_SEARCH_OTHER_ERR = 60;</code>
   */
  GAMMA_SEARCH_OTHER_ERR(60),
  /**
   * <code>Primary_IS_INVALID = 61;</code>
   */
  Primary_IS_INVALID(61),
  /**
   * <code>PARSING_RESULT_ERROR = 62;</code>
   */
  PARSING_RESULT_ERROR(62),
  /**
   * <code>Create_RpcClient_Failed = 70;</code>
   */
  Create_RpcClient_Failed(70),
  /**
   * <code>Call_RpcClient_Failed = 71;</code>
   */
  Call_RpcClient_Failed(71),
  /**
   * <code>RECOVER = 100;</code>
   */
  RECOVER(100),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SUCCESS = 0;</code>
   */
  public static final int SUCCESS_VALUE = 0;
  /**
   * <code>INTERNAL_ERROR = 1;</code>
   */
  public static final int INTERNAL_ERROR_VALUE = 1;
  /**
   * <code>NAME_OR_PASSWORD = 2;</code>
   */
  public static final int NAME_OR_PASSWORD_VALUE = 2;
  /**
   * <code>SYSBUSY = 3;</code>
   */
  public static final int SYSBUSY_VALUE = 3;
  /**
   * <code>PARAM_ERROR = 4;</code>
   */
  public static final int PARAM_ERROR_VALUE = 4;
  /**
   * <code>INVALID_CFG = 5;</code>
   */
  public static final int INVALID_CFG_VALUE = 5;
  /**
   * <code>TIMEOUT = 6;</code>
   */
  public static final int TIMEOUT_VALUE = 6;
  /**
   * <code>SERVICE_UNAVAILABLE = 7;</code>
   */
  public static final int SERVICE_UNAVAILABLE_VALUE = 7;
  /**
   * <code>ZONE_NOT_EXISTS = 8;</code>
   */
  public static final int ZONE_NOT_EXISTS_VALUE = 8;
  /**
   * <code>LOCAL_ZONE_OPS_FAILED = 9;</code>
   */
  public static final int LOCAL_ZONE_OPS_FAILED_VALUE = 9;
  /**
   * <code>DUP_ZONE = 10;</code>
   */
  public static final int DUP_ZONE_VALUE = 10;
  /**
   * <code>DUP_DB = 11;</code>
   */
  public static final int DUP_DB_VALUE = 11;
  /**
   * <code>INVALID_ENGINE = 12;</code>
   */
  public static final int INVALID_ENGINE_VALUE = 12;
  /**
   * <code>DB_NOTEXISTS = 13;</code>
   */
  public static final int DB_NOTEXISTS_VALUE = 13;
  /**
   * <code>DB_Not_Empty = 14;</code>
   */
  public static final int DB_Not_Empty_VALUE = 14;
  /**
   * <code>DUP_SPACE = 15;</code>
   */
  public static final int DUP_SPACE_VALUE = 15;
  /**
   * <code>SPACE_NOTEXISTS = 16;</code>
   */
  public static final int SPACE_NOTEXISTS_VALUE = 16;
  /**
   * <code>PARTITION_HAS_TASK_NOW = 17;</code>
   */
  public static final int PARTITION_HAS_TASK_NOW_VALUE = 17;
  /**
   * <code>REPLICA_NOT_EXISTS = 18;</code>
   */
  public static final int REPLICA_NOT_EXISTS_VALUE = 18;
  /**
   * <code>DUP_REPLICA = 19;</code>
   */
  public static final int DUP_REPLICA_VALUE = 19;
  /**
   * <code>PARTITION_REPLICA_LEADER_NOT_DELETE = 20;</code>
   */
  public static final int PARTITION_REPLICA_LEADER_NOT_DELETE_VALUE = 20;
  /**
   * <code>PS_NOTEXISTS = 21;</code>
   */
  public static final int PS_NOTEXISTS_VALUE = 21;
  /**
   * <code>PS_Already_Exists = 22;</code>
   */
  public static final int PS_Already_Exists_VALUE = 22;
  /**
   * <code>LOCAL_SPACE_OPS_FAILED = 23;</code>
   */
  public static final int LOCAL_SPACE_OPS_FAILED_VALUE = 23;
  /**
   * <code>Local_PS_Ops_Failed = 24;</code>
   */
  public static final int Local_PS_Ops_Failed_VALUE = 24;
  /**
   * <code>GENID_FAILED = 25;</code>
   */
  public static final int GENID_FAILED_VALUE = 25;
  /**
   * <code>LOCALDB_OPTFAILED = 26;</code>
   */
  public static final int LOCALDB_OPTFAILED_VALUE = 26;
  /**
   * <code>SPACE_SCHEMA_INVALID = 27;</code>
   */
  public static final int SPACE_SCHEMA_INVALID_VALUE = 27;
  /**
   * <code>RPC_GET_CLIENT_FAILED = 28;</code>
   */
  public static final int RPC_GET_CLIENT_FAILED_VALUE = 28;
  /**
   * <code>RPC_INVALID_RESP = 29;</code>
   */
  public static final int RPC_INVALID_RESP_VALUE = 29;
  /**
   * <code>RPC_INVOKE_FAILED = 30;</code>
   */
  public static final int RPC_INVOKE_FAILED_VALUE = 30;
  /**
   * <code>RPC_PARAM_ERROR = 31;</code>
   */
  public static final int RPC_PARAM_ERROR_VALUE = 31;
  /**
   * <code>METHOD_NOT_IMPLEMENT = 32;</code>
   */
  public static final int METHOD_NOT_IMPLEMENT_VALUE = 32;
  /**
   * <code>USER_NOT_EXISTS = 33;</code>
   */
  public static final int USER_NOT_EXISTS_VALUE = 33;
  /**
   * <code>DUP_USER = 34;</code>
   */
  public static final int DUP_USER_VALUE = 34;
  /**
   * <code>USER_OPS_FAILED = 35;</code>
   */
  public static final int USER_OPS_FAILED_VALUE = 35;
  /**
   * <code>AUTHENTICATION_FAILED = 36;</code>
   */
  public static final int AUTHENTICATION_FAILED_VALUE = 36;
  /**
   * <code>REGION_NOT_EXISTS = 37;</code>
   */
  public static final int REGION_NOT_EXISTS_VALUE = 37;
  /**
   * <code>MASTER_PS_CAN_NOT_SELECT = 38;</code>
   */
  public static final int MASTER_PS_CAN_NOT_SELECT_VALUE = 38;
  /**
   * <code>MASTER_PS_NOT_ENOUGH_SELECT = 39;</code>
   */
  public static final int MASTER_PS_NOT_ENOUGH_SELECT_VALUE = 39;
  /**
   * <code>PARTITION_DUPLICATE = 40;</code>
   */
  public static final int PARTITION_DUPLICATE_VALUE = 40;
  /**
   * <code>PARTITION_NOT_EXIST = 41;</code>
   */
  public static final int PARTITION_NOT_EXIST_VALUE = 41;
  /**
   * <code>PARTITION_NOT_LEADER = 42;</code>
   */
  public static final int PARTITION_NOT_LEADER_VALUE = 42;
  /**
   * <code>PARTITION_NO_LEADER = 43;</code>
   */
  public static final int PARTITION_NO_LEADER_VALUE = 43;
  /**
   * <code>PARTITION_REQ_PARAM = 44;</code>
   */
  public static final int PARTITION_REQ_PARAM_VALUE = 44;
  /**
   * <code>PARTITON_ENGINENAME_INVALID = 45;</code>
   */
  public static final int PARTITON_ENGINENAME_INVALID_VALUE = 45;
  /**
   * <code>UNKNOWN_PARTITION_RAFT_CMD_TYPE = 46;</code>
   */
  public static final int UNKNOWN_PARTITION_RAFT_CMD_TYPE_VALUE = 46;
  /**
   * <code>MASTER_SERVER_IS_NOT_RUNNING = 47;</code>
   */
  public static final int MASTER_SERVER_IS_NOT_RUNNING_VALUE = 47;
  /**
   * <code>PARTITION_IS_INVALID = 48;</code>
   */
  public static final int PARTITION_IS_INVALID_VALUE = 48;
  /**
   * <code>PARTITION_IS_CLOSED = 49;</code>
   */
  public static final int PARTITION_IS_CLOSED_VALUE = 49;
  /**
   * <code>DOCUMENT_NOT_EXIST = 50;</code>
   */
  public static final int DOCUMENT_NOT_EXIST_VALUE = 50;
  /**
   * <code>DOCUMENT_EXIST = 51;</code>
   */
  public static final int DOCUMENT_EXIST_VALUE = 51;
  /**
   * <code>DOCUMENT_MUST_HAS_SOURCE = 52;</code>
   */
  public static final int DOCUMENT_MUST_HAS_SOURCE_VALUE = 52;
  /**
   * <code>PULL_OUT_VERSION_NOT_MATCH = 53;</code>
   */
  public static final int PULL_OUT_VERSION_NOT_MATCH_VALUE = 53;
  /**
   * <code>FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE = 54;</code>
   */
  public static final int FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE_VALUE = 54;
  /**
   * <code>ROUTER_NO_PS_CLIENT = 55;</code>
   */
  public static final int ROUTER_NO_PS_CLIENT_VALUE = 55;
  /**
   * <code>ROUTER_CALL_PS_RPC_ERR = 56;</code>
   */
  public static final int ROUTER_CALL_PS_RPC_ERR_VALUE = 56;
  /**
   * <code>GAMMA_SEARCH_QUERY_NUM_LESS_0 = 57;</code>
   */
  public static final int GAMMA_SEARCH_QUERY_NUM_LESS_0_VALUE = 57;
  /**
   * <code>GAMMA_SEARCH_NO_CREATE_INDEX = 58;</code>
   */
  public static final int GAMMA_SEARCH_NO_CREATE_INDEX_VALUE = 58;
  /**
   * <code>GAMMA_SEARCH_INDEX_QUERY_ERR = 59;</code>
   */
  public static final int GAMMA_SEARCH_INDEX_QUERY_ERR_VALUE = 59;
  /**
   * <code>GAMMA_SEARCH_OTHER_ERR = 60;</code>
   */
  public static final int GAMMA_SEARCH_OTHER_ERR_VALUE = 60;
  /**
   * <code>Primary_IS_INVALID = 61;</code>
   */
  public static final int Primary_IS_INVALID_VALUE = 61;
  /**
   * <code>PARSING_RESULT_ERROR = 62;</code>
   */
  public static final int PARSING_RESULT_ERROR_VALUE = 62;
  /**
   * <code>Create_RpcClient_Failed = 70;</code>
   */
  public static final int Create_RpcClient_Failed_VALUE = 70;
  /**
   * <code>Call_RpcClient_Failed = 71;</code>
   */
  public static final int Call_RpcClient_Failed_VALUE = 71;
  /**
   * <code>RECOVER = 100;</code>
   */
  public static final int RECOVER_VALUE = 100;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static ErrorEnum valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorEnum forNumber(int value) {
    switch (value) {
      case 0: return SUCCESS;
      case 1: return INTERNAL_ERROR;
      case 2: return NAME_OR_PASSWORD;
      case 3: return SYSBUSY;
      case 4: return PARAM_ERROR;
      case 5: return INVALID_CFG;
      case 6: return TIMEOUT;
      case 7: return SERVICE_UNAVAILABLE;
      case 8: return ZONE_NOT_EXISTS;
      case 9: return LOCAL_ZONE_OPS_FAILED;
      case 10: return DUP_ZONE;
      case 11: return DUP_DB;
      case 12: return INVALID_ENGINE;
      case 13: return DB_NOTEXISTS;
      case 14: return DB_Not_Empty;
      case 15: return DUP_SPACE;
      case 16: return SPACE_NOTEXISTS;
      case 17: return PARTITION_HAS_TASK_NOW;
      case 18: return REPLICA_NOT_EXISTS;
      case 19: return DUP_REPLICA;
      case 20: return PARTITION_REPLICA_LEADER_NOT_DELETE;
      case 21: return PS_NOTEXISTS;
      case 22: return PS_Already_Exists;
      case 23: return LOCAL_SPACE_OPS_FAILED;
      case 24: return Local_PS_Ops_Failed;
      case 25: return GENID_FAILED;
      case 26: return LOCALDB_OPTFAILED;
      case 27: return SPACE_SCHEMA_INVALID;
      case 28: return RPC_GET_CLIENT_FAILED;
      case 29: return RPC_INVALID_RESP;
      case 30: return RPC_INVOKE_FAILED;
      case 31: return RPC_PARAM_ERROR;
      case 32: return METHOD_NOT_IMPLEMENT;
      case 33: return USER_NOT_EXISTS;
      case 34: return DUP_USER;
      case 35: return USER_OPS_FAILED;
      case 36: return AUTHENTICATION_FAILED;
      case 37: return REGION_NOT_EXISTS;
      case 38: return MASTER_PS_CAN_NOT_SELECT;
      case 39: return MASTER_PS_NOT_ENOUGH_SELECT;
      case 40: return PARTITION_DUPLICATE;
      case 41: return PARTITION_NOT_EXIST;
      case 42: return PARTITION_NOT_LEADER;
      case 43: return PARTITION_NO_LEADER;
      case 44: return PARTITION_REQ_PARAM;
      case 45: return PARTITON_ENGINENAME_INVALID;
      case 46: return UNKNOWN_PARTITION_RAFT_CMD_TYPE;
      case 47: return MASTER_SERVER_IS_NOT_RUNNING;
      case 48: return PARTITION_IS_INVALID;
      case 49: return PARTITION_IS_CLOSED;
      case 50: return DOCUMENT_NOT_EXIST;
      case 51: return DOCUMENT_EXIST;
      case 52: return DOCUMENT_MUST_HAS_SOURCE;
      case 53: return PULL_OUT_VERSION_NOT_MATCH;
      case 54: return FUNC_CAN_NOT_INVOKE_IN_FROZEN_ENGINE;
      case 55: return ROUTER_NO_PS_CLIENT;
      case 56: return ROUTER_CALL_PS_RPC_ERR;
      case 57: return GAMMA_SEARCH_QUERY_NUM_LESS_0;
      case 58: return GAMMA_SEARCH_NO_CREATE_INDEX;
      case 59: return GAMMA_SEARCH_INDEX_QUERY_ERR;
      case 60: return GAMMA_SEARCH_OTHER_ERR;
      case 61: return Primary_IS_INVALID;
      case 62: return PARSING_RESULT_ERROR;
      case 70: return Create_RpcClient_Failed;
      case 71: return Call_RpcClient_Failed;
      case 100: return RECOVER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorEnum>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorEnum> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorEnum>() {
          public ErrorEnum findValueByNumber(int number) {
            return ErrorEnum.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return Errors.getDescriptor().getEnumTypes().get(0);
  }

  private static final ErrorEnum[] VALUES = values();

  public static ErrorEnum valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorEnum(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:ErrorEnum)
}

